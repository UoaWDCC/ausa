/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/users/by-username": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetUserByUsername"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/by-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetUserByEmail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetUserById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["UpdateUser"];
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetUsers"];
        put?: never;
        post: operations["CreateUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/by-userId": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["DeleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/faq": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllFaqs"];
        put?: never;
        post: operations["CreateFaq"];
        delete: operations["DeleteAllFaqs"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/faq/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetFaqCategory"];
        put?: never;
        post?: never;
        delete: operations["DeleteFaq"];
        options?: never;
        head?: never;
        patch: operations["UpdateFaq"];
        trace?: never;
    };
    "/faq-category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllFaqCategories"];
        put?: never;
        post: operations["CreateFaqCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/faq-category/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetFaqCategory"];
        put?: never;
        post?: never;
        delete: operations["DeleteFaqCategory"];
        options?: never;
        head?: never;
        patch: operations["UpdateFaqCategory"];
        trace?: never;
    };
    "/external-resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllExternalResources"];
        put?: never;
        post: operations["CreateExternalResource"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/external-resources/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetExternalResource"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["UpdateExternalResource"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            name: string;
            email: string;
            username: string;
            id: string;
        };
        /** @description From T, pick a set of properties whose keys are in the union K */
        "Pick_User.id-or-email-or-name-or-username_": {
            id: string;
            email: string;
            name: string;
            username: string;
        };
        UserCreationParams: components["schemas"]["Pick_User.id-or-email-or-name-or-username_"];
        UpdateUserPackage: {
            username?: string;
            name?: string;
            email?: string;
        };
        Faq: {
            id: string;
            question: string;
            answer: string;
            categoryId: string;
        };
        GetAllFaqResponse: {
            error?: string;
            message?: string;
            data?: components["schemas"]["Faq"][];
        };
        GetFaqResponse: {
            error?: string;
            message?: string;
            data?: components["schemas"]["Faq"];
        };
        /** @description From T, pick a set of properties whose keys are in the union K */
        "Pick_Faq.Exclude_keyofFaq.id__": {
            question: string;
            answer: string;
            categoryId: string;
        };
        /** @description Construct a type with the properties of T except for those in type K. */
        "Omit_Faq.id_": components["schemas"]["Pick_Faq.Exclude_keyofFaq.id__"];
        createFaqRequest: components["schemas"]["Omit_Faq.id_"];
        /** @description Make all properties in T optional */
        Partial_createFaqRequest_: {
            question?: string;
            answer?: string;
            categoryId?: string;
        };
        updateFaqRequest: components["schemas"]["Partial_createFaqRequest_"];
        FaqCategory: {
            id: string;
            name: string;
            url: string;
        };
        GetAllFaqCategoryResponse: {
            error?: string;
            message?: string;
            data?: components["schemas"]["FaqCategory"][];
        };
        GetFaqCategoryResponse: {
            error?: string;
            message?: string;
            data?: components["schemas"]["FaqCategory"];
        };
        /** @description From T, pick a set of properties whose keys are in the union K */
        "Pick_FaqCategory.Exclude_keyofFaqCategory.id__": {
            name: string;
            url: string;
        };
        /** @description Construct a type with the properties of T except for those in type K. */
        "Omit_FaqCategory.id_": components["schemas"]["Pick_FaqCategory.Exclude_keyofFaqCategory.id__"];
        createFaqCategoryRequest: components["schemas"]["Omit_FaqCategory.id_"];
        /** @description Make all properties in T optional */
        Partial_createFaqCategoryRequest_: {
            name?: string;
            url?: string;
        };
        updateFaqCategoryRequest: components["schemas"]["Partial_createFaqCategoryRequest_"];
        ExternalResource: {
            id: string;
            title: string;
            url: string;
            description?: string;
        };
        GetAllExternalResourceResponse: {
            error?: string;
            message?: string;
            data?: components["schemas"]["ExternalResource"][];
        };
        GetExternalResourceResponse: {
            error?: string;
            message?: string;
            data?: components["schemas"]["ExternalResource"];
        };
        /** @description From T, pick a set of properties whose keys are in the union K */
        "Pick_ExternalResource.Exclude_keyofExternalResource.id__": {
            url: string;
            title: string;
            description?: string;
        };
        /** @description Construct a type with the properties of T except for those in type K. */
        "Omit_ExternalResource.id_": components["schemas"]["Pick_ExternalResource.Exclude_keyofExternalResource.id__"];
        createExternalResourceRequest: components["schemas"]["Omit_ExternalResource.id_"];
        /** @description Make all properties in T optional */
        Partial_createExternalResourceRequest_: {
            url?: string;
            title?: string;
            description?: string;
        };
        updateExternalResourceRequest: components["schemas"]["Partial_createExternalResourceRequest_"];
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetUserByUsername: {
        parameters: {
            query: {
                username: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"] | null;
                };
            };
        };
    };
    GetUserByEmail: {
        parameters: {
            query: {
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"] | null;
                };
            };
        };
    };
    GetUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"] | null;
                };
            };
        };
    };
    UpdateUser: {
        parameters: {
            query: {
                userId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserPackage"];
            };
        };
        responses: {
            /** @description Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"] | null;
                };
            };
        };
    };
    GetUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"][];
                };
            };
        };
    };
    CreateUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreationParams"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    DeleteUser: {
        parameters: {
            query: {
                userId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"] | null;
                };
            };
        };
    };
    GetAllFaqs: {
        parameters: {
            query?: {
                category?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllFaqResponse"];
                };
            };
        };
    };
    CreateFaq: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["createFaqRequest"];
            };
        };
        responses: {
            /** @description Successfully created FAQ */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFaqResponse"];
                };
            };
        };
    };
    DeleteAllFaqs: {
        parameters: {
            query?: {
                categoryId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted all FAQs */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetFaqCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFaqResponse"];
                };
            };
        };
    };
    DeleteFaq: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted FAQ */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UpdateFaq: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["updateFaqRequest"];
            };
        };
        responses: {
            /** @description Successfully updated FAQ */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFaqResponse"];
                };
            };
        };
    };
    GetAllFaqCategories: {
        parameters: {
            query?: {
                name?: string;
                url?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllFaqCategoryResponse"];
                };
            };
        };
    };
    CreateFaqCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["createFaqCategoryRequest"];
            };
        };
        responses: {
            /** @description Successfully created FAQ Category */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFaqCategoryResponse"];
                };
            };
        };
    };
    GetFaqCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFaqCategoryResponse"];
                };
            };
        };
    };
    DeleteFaqCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted FAQ category */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UpdateFaqCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["updateFaqCategoryRequest"];
            };
        };
        responses: {
            /** @description Successfully updated FAQ category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFaqCategoryResponse"];
                };
            };
        };
    };
    GetAllExternalResources: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllExternalResourceResponse"];
                };
            };
        };
    };
    CreateExternalResource: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["createExternalResourceRequest"];
            };
        };
        responses: {
            /** @description Successfully created external resource */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetExternalResourceResponse"];
                };
            };
        };
    };
    GetExternalResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetExternalResourceResponse"];
                };
            };
        };
    };
    UpdateExternalResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["updateExternalResourceRequest"];
            };
        };
        responses: {
            /** @description Successfully updated external resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetExternalResourceResponse"];
                };
            };
        };
    };
}
